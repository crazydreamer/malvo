@[
Suppose that p is a pointer variable that contains the NULL pointer. What happens if your program tries to read or write *p?
]@
@A syntax error always occurs at compilation time@
@A run-time error always occurs when *p is evaluated@
@A run-time error always occurs when the program finishes@
@The results are unpredictable@
@b@

@[
What output will be generated by the given code segment?

```c
void prtFun(void);   

int main()
{
    int b = 0;
    static int a = 1; /* Line 1 */
    prtFun();
    a += 1;
    prtFun();
    printf("%d%d ", a, b);
}

void prtFun(void)
{ 
     static int a = 2; /* Line 2 */
     int b = 1;
     a += ++b;
     printf("%d%d ", a, b);
}
```
]@
@314142@
@426161@
@315252@
@c@

@[
Consider the following recursive C function that takes two arguments:

```c
unsigned int foo(int n, unsigned int r) {
    if (n > 0) 
        return (n % r) + foo(n / r, r);
    else 
        return 0;
}
```

What is the return value of the function foo when it is called as foo(513, 2)?
]@
@9@
@8@
@5@
@2@
@d@

@[
In the circular array version of the queue class (with a fixed-sized array), which operations require linear time for their worst-case behavior?
]@
@Front@
@Enqueue@
@Empty@
@None of these operations require linear time@
@d@

@[
Comment on the output of this C code?

```c
#include <stdio.h>
int main()
{
    char *str = "This" //Line 1
    char *ptr = "Program\n"; //Line 2
    str = ptr; //Line 3
    printf("%s, %s\n", str, ptr); //Line 4
}
```
]@
@Memory holding “this” is cleared at line 3@
@Memory holding “this” loses its reference at line 3@
@You cannot assign pointer like in Line 3@
@Output will be This, Program@
@b@

@[
Calling a function f with  an array variable a[3] where a is an array, is equivalent to:
]@
@f(a[3])@
@f(*(a + 3))@
@f(3[a])@
@All of the mentioned@
@d@

@[
Which of the following is not a valid mathematical function?
]@
@frexp(x);@
@atan2(x,y);@
@srand(x);@
@fmod(x);@
@d@

@[
Point out the error, if any in the for loop.

```  
#include<stdio.h>

int main()
{
    int i = 1;
    for(;;)
    {
        printf("%d\n", i++);
        if(i > 10)
            break;
    }
    return 0;
}
```
]@
@There should be a condition in the for loop@
@The two semicolons should be dropped@
@The for loop should be replaced with while loop@
@No error@
@d@

@[
Which among the following is the correct syntax to declare a static variable register?
]@
@static register a;@
@register static a;@
@Both of the above@
@We cannot use static and register together@
@d@

@[
The correct way to generate numbers between minimum and maximum (inclusive) is:
]@
@minimum + (rand() % (maximum - minimum));@
@minimum + (rand() % (maximum - minimum + 1));@
@minimum * (rand() % (maximum - minimum))@
@minimum - (rand() % (maximum + minimum));@
@b@

@[

]@
@@
@@
@@
@@
@@
